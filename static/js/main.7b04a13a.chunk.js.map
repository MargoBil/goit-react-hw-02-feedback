{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","data-name","onClick","Statistics","good","neutral","bad","positivePercentage","total","Section","title","children","Notification","App","state","name","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","isShowStatistic","Component","ReactDOM","render","document","getElementById"],"mappings":"2NAYeA,EAVS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACxB,OACE,oCACA,4BAAQC,KAAO,SAASC,YAAY,OAAOC,QAAUH,GAArD,QACA,4BAAQC,KAAO,SAASC,YAAY,UAAUC,QAAUH,GAAxD,WACA,4BAAQC,KAAO,SAASC,YAAY,MAAMC,QAAUH,GAApD,SCSWI,EAdI,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,mBAAoBC,EAAW,EAAXA,MAC3D,OACE,oCACA,4BACE,4BAAI,mCAAW,8BAAOJ,IACtB,4BAAI,sCAAc,8BAAOC,IACzB,4BAAI,kCAAU,8BAAOC,IACrB,4BAAI,oCAAY,8BAAOE,IACvB,4BAAI,gDAAwB,8BAAOD,EAAP,SCCnBE,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OACE,6BAASD,MAAOA,GACd,4BAAKA,GACJC,ICEQC,EANM,WACnB,OACE,kDCyDWC,E,4MArDbC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,EACLE,MAAO,EACPD,mBAAoB,G,EAGtBR,gBAAkB,YAAe,IACzBgB,EADwB,EAAZC,OACEC,QAAQF,KAC5B,EAAKG,UAAU,SAAAC,GAAS,sBAAOJ,EAAOI,EAAUJ,GAAQ,MACxD,EAAKK,qBACL,EAAKC,mC,EAGPD,mBAAqB,WACnB,EAAKF,UAAU,SAAAC,GAAS,MAAK,CAC3BX,MAAOW,EAAUX,MAAQ,O,EAI7Ba,gCAAkC,WAChC,EAAKH,UAAU,SAAAC,GAAS,MAAK,CAC3BZ,mBAAoBe,KAAKC,MAAOJ,EAAUf,KAAOe,EAAUX,MAAQ,U,uDAI5D,IAAD,EACgDgB,KAAKV,MAAtDV,EADC,EACDA,KAAMC,EADL,EACKA,QAASC,EADd,EACcA,IAAKE,EADnB,EACmBA,MAAOD,EAD1B,EAC0BA,mBAC5BkB,EAAkBD,KAAKV,MAAMN,MAAQ,EAC3C,OACE,6BACE,kBAAC,EAAD,CAASE,MAAM,yBACb,kBAAC,EAAD,CACEX,gBAAiByB,KAAKzB,mBAG1B,kBAAC,EAAD,CAASW,MAAM,cACZe,EACG,kBAAC,EAAD,CACErB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLE,MAAOA,EACPD,mBAAoBA,IAEtB,kBAAC,EAAD,Y,GA/CImB,aCHlBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.7b04a13a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions = ({onLeaveFeedback}) => {\r\n  return (\r\n    <>\r\n    <button type = \"button\" data-name = \"good\" onClick ={onLeaveFeedback}>Good</button>\r\n    <button type = \"button\" data-name = \"neutral\" onClick ={onLeaveFeedback}>Neutral</button>\r\n    <button type = \"button\" data-name = \"bad\" onClick ={onLeaveFeedback}>Bad</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\n\r\nconst Statistics = ({good, neutral, bad, positivePercentage, total}) => {\r\n  return (\r\n    <>\r\n    <ul>\r\n      <li><p>Good</p><span>{good}</span></li>\r\n      <li><p>Neutral</p><span>{neutral}</span></li>\r\n      <li><p>Bad</p><span>{bad}</span></li>\r\n      <li><p>Total</p><span>{total}</span></li>\r\n      <li><p>Positive feedback</p><span>{positivePercentage}%</span></li>\r\n    </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\n\r\nconst Section = ({title, children}) => {\r\n  return (\r\n    <section title={title}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\n\r\nconst Notification = () => {\r\n  return (\r\n    <h3>No feedback given</h3>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React, {Component} from 'react';\r\n\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Section from './Section/Section';\r\nimport Notification from './Notification/Notification';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positivePercentage: 0,\r\n  };\r\n\r\n  onLeaveFeedback = ({target}) => {\r\n    const name = target.dataset.name;\r\n    this.setState (prevState => ({[name]: prevState[name] + 1}));\r\n    this.countTotalFeedback ();\r\n    this.countPositiveFeedbackPercentage ();\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    this.setState (prevState => ({\r\n      total: prevState.total + 1,\r\n    }));\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    this.setState (prevState => ({\r\n      positivePercentage: Math.round (prevState.good / prevState.total * 100),\r\n    }));\r\n  };\r\n\r\n  render () {\r\n    const {good, neutral, bad, total, positivePercentage} = this.state;\r\n    const isShowStatistic = this.state.total > 0;\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {isShowStatistic\r\n            ? <Statistics\r\n                good={good}\r\n                neutral={neutral}\r\n                bad={bad}\r\n                total={total}\r\n                positivePercentage={positivePercentage}\r\n              />\r\n            : <Notification />}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}